Use GDB to step through the Hello World program and observe:
- CPU Registers
- Memory Location

Answer/ commands:

gdb ./helloworld
break _start (we defined that as the start of the application)
set disassembly-flavor intel
run
disassemble
Dump of assembler code for function _start:
=> 0x08048080 <+0>:     mov    eax,0x4
   0x08048085 <+5>:     mov    ebx,0x1
   0x0804808a <+10>:    mov    ecx,0x80490a4
   0x0804808f <+15>:    mov    edx,0xc
   0x08048094 <+20>:    int    0x80
   0x08048096 <+22>:    mov    eax,0x1
   0x0804809b <+27>:    mov    ebx,0x0
   0x080480a0 <+32>:    int    0x80

(gdb) info registers
eax            0x0      0
ecx            0x0      0
edx            0x0      0
ebx            0x0      0
esp            0xffffd810       0xffffd810
ebp            0x0      0x0
esi            0x0      0
edi            0x0      0
eip            0x8048080        0x8048080 <_start>
eflags         0x202    [ IF ]
cs             0x23     35
ss             0x2b     43
ds             0x2b     43
es             0x2b     43
fs             0x0      0
gs             0x0      0

Lets step through the instructions:

(gdb)stepi
; this will move the ==> arrow through the stack.
(gdb) stepi
0x08048085 in _start ()
(gdb) disassemble       
Dump of assembler code for function _start:
   0x08048080 <+0>:     mov    eax,0x4
=> 0x08048085 <+5>:     mov    ebx,0x1
   0x0804808a <+10>:    mov    ecx,0x80490a4
   0x0804808f <+15>:    mov    edx,0xc
   0x08048094 <+20>:    int    0x80
   0x08048096 <+22>:    mov    eax,0x1
   0x0804809b <+27>:    mov    ebx,0x0
   0x080480a0 <+32>:    int    0x80
End of assembler dump.
(gdb) info registers
eax            0x4      4  <--- we see that our sys call gets moved to eax.
ecx            0x0      0
edx            0x0      0
ebx            0x0      0
esp            0xffffd810       0xffffd810
ebp            0x0      0x0
esi            0x0      0
edi            0x0      0
eip            0x8048085        0x8048085 <_start+5>
eflags         0x202    [ IF ]
cs             0x23     35
ss             0x2b     43
ds             0x2b     43
es             0x2b     43
fs             0x0      0
gs             0x0      0
(gdb) 

=> 0x0804808a <+10>:    mov    ecx,0x80490a4 ; this is our hello string
x/s 0x80490a4
(gdb) x/s 0x80490a4
0x80490a4:      "Hello World!"
(gdb) 

ETC. we can step through with stepi and watch the process all the way to the exit.
